{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red108\green54\blue169;
\red57\green0\blue160;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c42190\c21278\c66379;
\csgenericrgb\c22454\c0\c62803;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid2\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl360\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\fs28 \
- Used xCode 12.4 \
- Swift 5\
\
- Architecture: MVVM swift POP (protocol oriented programming)\
- Dependency Injection \
- Design\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\sl360\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}Main View = UINavigation controller --> Root View Controller is UIViewController with a UITableView of Movies List Cells \
{\listtext	2.	}Movie Details View controller: UIViewController with 
\f1\b 2 child controllers
\f0\b0 \
\pard\tx940\tx1440\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li1440\fi-1440\sl360\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	a.	}Child 1 : UIViewController with UIScrollView with movie details\
{\listtext	b.	}Child 2: UICollection View of "Recommended Movies"\
\pard\tx220\tx720\tx1120\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\sl360\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	3.	}Network datasource downloader\
{\listtext	4.	}Used Core Data to save/cache movies datas. \
{\listtext	5.	}View Models Class uses data Box Binding (Box Class) to bind data in View Controllers \
{\listtext	6.	}Models data are saved in Movie class as an NSManagedObject in Core Data\
{\listtext	7.	}Implemented error checking for Network and data parsing \
{\listtext	8.	}Testing for Movie Data and Model Views classes. \
{\listtext	9.	}The HTTPClient uses 
\f2\fs24 \cf2 \cb3 cachePolicy: .\cf4 reloadRevalidatingCacheData\
\ls1\ilvl0
\f0\fs28 \cf0 \cb1 {\listtext	10.	}LibrairyAPI Class is singleton. A Face pattern for downloading data from server and from Core Data\
{\listtext	11.	}The MovieDetailViewController's View contains a UIScroll View to scroll the movie details. \
{\listtext	12.	}Core Data methods expect to be run on the same thread. Used the 
\f2\fs24 \cf5 \cb3 DispatchQueue
\f0\fs28 \cf0 \cb1  on the main thread.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl360\slmult1\pardirnatural\partightenfactor0
\cf0 \
- No compiler warning and errors \
- Run Instruments tool for memory leak detection and performance success \
- All Unit tests passes\
- Manually Tested the application in iPhone 11's Simulator (iOS Version 14.4)\
- Tested with no Internet connection and display an error message on startup!\
- Tested in 
\f1\b Portrait
\f0\b0  and 
\f1\b Landscape
\f0\b0  mode \
\
What can be done farther? \
\

\f1\b Optimization
\f0\b0 : \
- Handle very big movie list by only requesting the first chunk like 30 movies at a time. When the tableView scrolls up to the bottom we fetch the next chunk and so on. \
This will speed the display for very big data list to display as they are only fetched on demand\
- \
- Display a visual indicator (like an activity indicator View or an animated Text) while the app is downloading data so to inform the user and the overall UX experience is better.  \
- Adding more tests (Edge case like very big data lists and unsupported Images (format or size)) \
- Supporting Dynamic Font Sizing\
- Supporting deleting from the list \
- Supporting rating display and Vote. \
- Supporting
\f1\b  Movie search
\f0\b0  (Core Data might be a good help for This using relation ships and predicates)\
- Text Localization\
- Supporting dark mode\
- icons and starting Splashs are easy to add in asset catalog \
- Handle memory/storage warning (Limited resources) \
- ...\
\
\
\
\
}